     1                                  [BITS 32]
     2                                  section .bss
     3 00000000 <res 00000020>          str0: resb 0x20
     4                                  section .text
     5                                  	global _start
     6                                  _start:
     7 00000000 89E5                    	mov ebp, esp
     8 00000002 E8EF000000              	call main
     9 00000007 50                      	push eax
    10 00000008 E8BE010000              	call exit
    11                                  ;------------------------------------| startfunc fib
    12                                  fib:
    13 0000000D 55                      	push ebp
    14 0000000E 89E5                    	mov ebp, esp
    15                                  ;------------------------------------| arg int a
    16                                  ;------------------------------------| decl _t2 int
    17                                  ;------------------------------------| decl _t1 int
    18                                  ;------------------------------------| decl _t3 int
    19                                  ;------------------------------------| decl _t5 int
    20                                  ;------------------------------------| decl _t4 int
    21                                  ;------------------------------------| decl _t6 int
    22                                  ;------------------------------------| end_decls
    23 00000010 83EC18                  	sub esp, 24
    24                                  ;------------------------------------| _t1 := a < 2
    25 00000013 B901000000              	mov ecx, 1
    26 00000018 8B4508                  	mov eax, [ebp + 8]
    27 0000001B BB02000000              	mov ebx, 2
    28 00000020 39D8                    	cmp eax, ebx
    29 00000022 7C05                    	jl .L_0
    30 00000024 B900000000              	mov ecx, 0
    31                                  .L_0:
    32 00000029 894DF8                  	mov dword [ebp + -8], ecx
    33                                  ;------------------------------------| JZ .L0: _t1
    34 0000002C 8B45F8                  	mov eax, [ebp + -8]
    35 0000002F 83F800                  	cmp eax, 0
    36 00000032 7407                    	jz .L0
    37                                  ;------------------------------------| return 1
    38 00000034 B801000000              	mov eax, 1
    39 00000039 EB48                    	jmp .end
    40                                  ;------------------------------------| .L0:
    41                                  .L0:
    42                                  ;------------------------------------| _t2 := a - 1
    43 0000003B 8B4508                  	mov eax, [ebp + 8]
    44 0000003E BB01000000              	mov ebx, 1
    45 00000043 29D8                    	sub eax, ebx
    46 00000045 8945FC                  	mov [ebp + -4], eax
    47                                  ;------------------------------------| param _t2
    48 00000048 8B45FC                  	mov eax, [ebp + -4]
    49 0000004B 50                      	push eax
    50                                  ;------------------------------------| _t3 = CALL fib
    51 0000004C E8BCFFFFFF              	call fib
    52 00000051 8945F4                  	mov dword [ebp + -12], eax
    53 00000054 83C404                  	add esp, 4
    54                                  ;------------------------------------| _t4 := a - 2
    55 00000057 8B4508                  	mov eax, [ebp + 8]
    56 0000005A BB02000000              	mov ebx, 2
    57 0000005F 29D8                    	sub eax, ebx
    58 00000061 8945EC                  	mov [ebp + -20], eax
    59                                  ;------------------------------------| param _t4
    60 00000064 8B45EC                  	mov eax, [ebp + -20]
    61 00000067 50                      	push eax
    62                                  ;------------------------------------| _t5 = CALL fib
    63 00000068 E8A0FFFFFF              	call fib
    64 0000006D 8945F0                  	mov dword [ebp + -16], eax
    65 00000070 83C404                  	add esp, 4
    66                                  ;------------------------------------| _t6 := _t3 + _t5
    67 00000073 8B45F4                  	mov eax, [ebp + -12]
    68 00000076 8B5DF0                  	mov ebx, [ebp + -16]
    69 00000079 01D8                    	add eax, ebx
    70 0000007B 8945E8                  	mov [ebp + -24], eax
    71                                  ;------------------------------------| return _t6
    72 0000007E 8B45E8                  	mov eax, [ebp + -24]
    73 00000081 EB00                    	jmp .end
    74                                  ;------------------------------------| endfunc fib
    75                                  .end:
    76 00000083 89EC                    	mov esp, ebp
    77 00000085 5D                      	pop ebp
    78 00000086 C3                      	ret
    79                                  ;------------------------------------| startfunc factorial
    80                                  factorial:
    81 00000087 55                      	push ebp
    82 00000088 89E5                    	mov ebp, esp
    83                                  ;------------------------------------| arg int a
    84                                  ;------------------------------------| decl _t9 int
    85                                  ;------------------------------------| decl _t8 int
    86                                  ;------------------------------------| decl _t10 int
    87                                  ;------------------------------------| decl _t7 int
    88                                  ;------------------------------------| end_decls
    89 0000008A 83EC10                  	sub esp, 16
    90                                  ;------------------------------------| _t7 := a < 2
    91 0000008D B901000000              	mov ecx, 1
    92 00000092 8B4508                  	mov eax, [ebp + 8]
    93 00000095 BB02000000              	mov ebx, 2
    94 0000009A 39D8                    	cmp eax, ebx
    95 0000009C 7C05                    	jl .L_1
    96 0000009E B900000000              	mov ecx, 0
    97                                  .L_1:
    98 000000A3 894DF0                  	mov dword [ebp + -16], ecx
    99                                  ;------------------------------------| JZ .L1: _t7
   100 000000A6 8B45F0                  	mov eax, [ebp + -16]
   101 000000A9 83F800                  	cmp eax, 0
   102 000000AC 7407                    	jz .L1
   103                                  ;------------------------------------| return 1
   104 000000AE B801000000              	mov eax, 1
   105 000000B3 EB2C                    	jmp .end
   106                                  ;------------------------------------| .L1:
   107                                  .L1:
   108                                  ;------------------------------------| _t8 := a - 1
   109 000000B5 8B4508                  	mov eax, [ebp + 8]
   110 000000B8 BB01000000              	mov ebx, 1
   111 000000BD 29D8                    	sub eax, ebx
   112 000000BF 8945F8                  	mov [ebp + -8], eax
   113                                  ;------------------------------------| param _t8
   114 000000C2 8B45F8                  	mov eax, [ebp + -8]
   115 000000C5 50                      	push eax
   116                                  ;------------------------------------| _t9 = CALL factorial
   117 000000C6 E8BCFFFFFF              	call factorial
   118 000000CB 8945FC                  	mov dword [ebp + -4], eax
   119 000000CE 83C404                  	add esp, 4
   120                                  ;------------------------------------| _t10 := a * _t9
   121 000000D1 8B4508                  	mov eax, [ebp + 8]
   122 000000D4 8B5DFC                  	mov ebx, [ebp + -4]
   123 000000D7 F7E3                    	mul ebx
   124 000000D9 8945F4                  	mov [ebp + -12], eax
   125                                  ;------------------------------------| return _t10
   126 000000DC 8B45F4                  	mov eax, [ebp + -12]
   127 000000DF EB00                    	jmp .end
   128                                  ;------------------------------------| endfunc factorial
   129                                  .end:
   130 000000E1 89EC                    	mov esp, ebp
   131 000000E3 5D                      	pop ebp
   132 000000E4 C3                      	ret
   133                                  ;------------------------------------| startfunc return_string
   134                                  return_string:
   135 000000E5 55                      	push ebp
   136 000000E6 89E5                    	mov ebp, esp
   137                                  ;------------------------------------| end_decls
   138 000000E8 83EC00                  	sub esp, 0
   139                                  ;------------------------------------| return "Hello, world"
   140 000000EB B8[00000000]            	mov eax, strconst_0
   141 000000F0 EB00                    	jmp .end
   142                                  ;------------------------------------| endfunc return_string
   143                                  .end:
   144 000000F2 89EC                    	mov esp, ebp
   145 000000F4 5D                      	pop ebp
   146 000000F5 C3                      	ret
   147                                  ;------------------------------------| startfunc main
   148                                  main:
   149 000000F6 55                      	push ebp
   150 000000F7 89E5                    	mov ebp, esp
   151                                  ;------------------------------------| decl _t11 int
   152                                  ;------------------------------------| decl _t12 int
   153                                  ;------------------------------------| end_decls
   154 000000F9 83EC08                  	sub esp, 8
   155                                  ;------------------------------------| _t11 = CALL return_string
   156 000000FC E8E4FFFFFF              	call return_string
   157 00000101 8945FC                  	mov dword [ebp + -4], eax
   158 00000104 83C400                  	add esp, 0
   159                                  ;------------------------------------| param _t11
   160 00000107 8B45FC                  	mov eax, [ebp + -4]
   161 0000010A 50                      	push eax
   162                                  ;------------------------------------| _t12 = CALL prints
   163 0000010B E892000000              	call prints
   164 00000110 8945F8                  	mov dword [ebp + -8], eax
   165 00000113 83C404                  	add esp, 4
   166                                  ;------------------------------------| return 0
   167 00000116 B800000000              	mov eax, 0
   168 0000011B EB00                    	jmp .end
   169                                  ;------------------------------------| endfunc main
   170                                  .end:
   171 0000011D 89EC                    	mov esp, ebp
   172 0000011F 5D                      	pop ebp
   173 00000120 C3                      	ret
   174                                  	%include "src/stdlib.asm"
   175                              <1> %define ASCII_0       0x30
   176                              <1> %define ASCII_NEWLINE 0xa
   177                              <1> %define BUFSIZE 10
   178                              <1> ; print the integer pointed to by the first argument
   179                              <1> print:
   180 00000121 55                  <1>     push ebp
   181 00000122 89E5                <1>     mov ebp, esp
   182 00000124 8B4508              <1>     mov eax, [ebp + 8]
   183 00000127 BB0A000000          <1>     mov ebx, 10
   184 0000012C B900000000          <1>     mov ecx, 0
   185 00000131 83EC0A              <1>     sub esp, BUFSIZE; reserve space for the integer
   186                              <1> 
   187 00000134 BE09000000          <1>     mov esi, BUFSIZE - 1
   188 00000139 29CE                <1>     sub esi, ecx
   189 0000013B C645FF0A            <1>     mov byte [ebp - 1], ASCII_NEWLINE
   190 0000013F 83C101              <1>     add ecx, 1         ; adjust length
   191                              <1> 
   192                              <1> .loop:
   193                              <1>     ; push character on the stack
   194                              <1>     ; store length in ecx
   195                              <1> 
   196 00000142 BA00000000          <1>     mov edx, 0       ; zero upper bits of EDX:EAX
   197 00000147 F7F3                <1>     div ebx          ; divide by 10
   198 00000149 83C230              <1>     add edx, ASCII_0 ; adjust to ascii
   199                              <1> 
   200 0000014C BE09000000          <1>     mov esi, BUFSIZE - 1
   201 00000151 29CE                <1>     sub esi, ecx
   202 00000153 881434              <1>     mov [esp + esi], dl; store in the buffer
   203                              <1> 
   204 00000156 83C101              <1>     add ecx, 1       ; adjust length
   205 00000159 83F800              <1>     cmp eax, 0       ; see if we are done
   206 0000015C 75E4                <1>     jnz .loop
   207                              <1> 
   208                              <1> 
   209 0000015E B804000000          <1>     mov eax, 4   ; write syscall
   210 00000163 BB00000000          <1>     mov ebx, 0   ; stdout fd
   211 00000168 89CA                <1>     mov edx, ecx ; length of string
   212 0000016A 89E9                <1>     mov ecx, ebp
   213 0000016C 29D1                <1>     sub ecx, edx ; location of output string
   214 0000016E CD80                <1>     int 0x80
   215 00000170 89EC                <1>     mov esp, ebp
   216 00000172 5D                  <1>     pop ebp
   217 00000173 C3                  <1>     ret
   218                              <1> 
   219                              <1> ; get the length of a null terminated string
   220                              <1> strlen:
   221 00000174 8B742404            <1>     mov esi, [esp + 4]
   222 00000178 31DB                <1>     xor ebx, ebx
   223                              <1> .start:
   224 0000017A 8A041E              <1>     mov al, [esi + ebx]
   225 0000017D 3C00                <1>     cmp al, 0
   226 0000017F 7405                <1>     jz .done
   227 00000181 83C301              <1>     add ebx, 1
   228 00000184 EBF4                <1>     jmp .start
   229                              <1> .done:
   230 00000186 89D8                <1>     mov eax, ebx
   231 00000188 C3                  <1>     ret
   232                              <1> 
   233                              <1> putc:
   234 00000189 BA01000000          <1>     mov edx, 1
   235 0000018E B804000000          <1>     mov eax, 4
   236 00000193 BB00000000          <1>     mov ebx, 0
   237 00000198 6A0A                <1>     push 0xa
   238 0000019A 89E1                <1>     mov ecx, esp
   239 0000019C CD80                <1>     int 0x80
   240 0000019E 83C404              <1>     add esp, 4
   241 000001A1 C3                  <1>     ret
   242                              <1> 
   243                              <1> ; print a string to stdout
   244                              <1> prints:
   245 000001A2 FF742404            <1>     push dword [esp + 4]
   246 000001A6 E8C9FFFFFF          <1>     call strlen
   247 000001AB 83C404              <1>     add esp, 4
   248 000001AE 89C2                <1>     mov edx, eax       ; length of the string
   249 000001B0 B804000000          <1>     mov eax, 4         ; write syscall
   250 000001B5 BB00000000          <1>     mov ebx, 0         ; stdout fd
   251 000001BA 8B4C2404            <1>     mov ecx, [esp + 4] ; location of string to print
   252 000001BE CD80                <1>     int 0x80
   253 000001C0 6A0A                <1>     push 0xa ;print a newline
   254 000001C2 E8C2FFFFFF          <1>     call putc
   255 000001C7 83C404              <1>     add esp, 4
   256 000001CA C3                  <1>     ret
   257                              <1> 
   258                              <1> exit:
   259 000001CB 8B5C2404            <1>     mov ebx, [esp + 4]
   260 000001CF B801000000          <1> 	mov eax, 1
   261 000001D4 CD80                <1> 	int 0x80
   262                                  section .data
   263                                  strconst_0:
   264 00000000 48656C6C6F2C20776F-     db "Hello, world", 0
   265 00000009 726C6400           
