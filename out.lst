     1                                  [BITS 32]
     2                                  section .data
     3                                  section .bss
     4 00000000 <res 00000020>          str0: resb 0x20
     5                                  _stack_start:
     6 00000020 <res 0000FFFF>          	resb 0xffff
     7                                  _stack_end:
     8                                  section .text
     9                                  	global _start
    10                                  _start:
    11 00000000 BC[20000000]            	mov esp, _stack_start
    12 00000005 89E5                    	mov ebp, esp
    13 00000007 E82E000000              	call main
    14 0000000C BB00000000              	mov ebx, 0
    15 00000011 B801000000              	mov eax, 1
    16 00000016 CD80                    	int 0x80
    17                                  ;------------------------------------| startfunc f0
    18                                  f0:
    19 00000018 55                      	push ebp
    20 00000019 89E5                    	mov ebp, esp
    21                                  ;------------------------------------| arg int f0_param_0
    22                                  ;------------------------------------| arg int f0_param_1
    23                                  ;------------------------------------| end_decls
    24 0000001B 83EC00                  	sub esp, 0
    25                                  ;------------------------------------| param f0_param_0
    26 0000001E 8B4504                  	mov eax, [ebp + 4]
    27 00000021 50                      	push eax
    28                                  ;------------------------------------| CALL print
    29 00000022 E867000000              	call print
    30 00000027 83C404                  	add esp, 4
    31                                  ;------------------------------------| param f0_param_1
    32 0000002A 8B4508                  	mov eax, [ebp + 8]
    33 0000002D 50                      	push eax
    34                                  ;------------------------------------| CALL print
    35 0000002E E85B000000              	call print
    36 00000033 83C404                  	add esp, 4
    37                                  ;------------------------------------| endfunc f0
    38                                  .end:
    39 00000036 89EC                    	mov esp, ebp
    40 00000038 5D                      	pop ebp
    41 00000039 C3                      	ret
    42                                  ;------------------------------------| startfunc main
    43                                  main:
    44 0000003A 55                      	push ebp
    45 0000003B 89E5                    	mov ebp, esp
    46                                  ;------------------------------------| decl a int
    47                                  ;------------------------------------| decl b' int
    48                                  ;------------------------------------| decl b'' int
    49                                  ;------------------------------------| decl b int
    50                                  ;------------------------------------| end_decls
    51 0000003D 83EC10                  	sub esp, 16
    52                                  ;------------------------------------| := b 2
    53 00000040 C745F002000000          	mov dword [ebp + -16], 2
    54                                  ;------------------------------------| := a 556
    55 00000047 C745FC2C020000          	mov dword [ebp + -4], 556
    56                                  ;------------------------------------| JZ L0: 10
    57 0000004E B80A000000              	mov eax, 10
    58 00000053 83F800                  	cmp eax, 0
    59 00000056 7432                    	jz L0
    60                                  ;------------------------------------| := b' 123
    61 00000058 C745F87B000000          	mov dword [ebp + -8], 123
    62                                  ;------------------------------------| JZ L1: 10
    63 0000005F B80A000000              	mov eax, 10
    64 00000064 83F800                  	cmp eax, 0
    65 00000067 7400                    	jz L1
    66                                  ;------------------------------------| L1:
    67                                  L1:
    68                                  ;------------------------------------| param 10
    69 00000069 6A0A                    	push 10
    70                                  ;------------------------------------| * _t0 b' b'
    71 0000006B 8B45F8                  	mov eax, [ebp + -8]
    72 0000006E 50                      	push eax
    73 0000006F 8B5DF8                  	mov ebx, [ebp + -8]
    74 00000072 F7E3                    	mul ebx
    75 00000074 5B                      	pop ebx
    76                                  ;------------------------------------| param _t0
    77 00000075 50                      	push eax
    78                                  ;------------------------------------| CALL f0
    79 00000076 E89DFFFFFF              	call f0
    80 0000007B 83C408                  	add esp, 8
    81                                  ;------------------------------------| param a
    82 0000007E 8B45FC                  	mov eax, [ebp + -4]
    83 00000081 50                      	push eax
    84                                  ;------------------------------------| CALL print
    85 00000082 E807000000              	call print
    86 00000087 83C404                  	add esp, 4
    87                                  ;------------------------------------| L0:
    88                                  L0:
    89                                  ;------------------------------------| endfunc main
    90                                  .end:
    91 0000008A 89EC                    	mov esp, ebp
    92 0000008C 5D                      	pop ebp
    93 0000008D C3                      	ret
    94                                  	%include "src/stdlib.asm"
    95                              <1> %define ASCII_A       0x41
    96                              <1> %define ASCII_0       0x30
    97                              <1> %define ASCII_NEWLINE 0xa
    98                              <1> %define BUFSIZE 10
    99                              <1> ; print the integer pointed to by the first argument
   100                              <1> print:
   101 0000008E 55                  <1>     push ebp
   102 0000008F 89E5                <1>         mov ebp, esp
   103 00000091 8B4508              <1>         mov eax, [ebp + 8]
   104 00000094 BB0A000000          <1>         mov ebx, 10
   105 00000099 B900000000          <1>         mov ecx, 0
   106 0000009E 83EC0A              <1>         sub esp, BUFSIZE; reserve space for the integer
   107                              <1> 
   108 000000A1 BE09000000          <1>         mov esi, BUFSIZE - 1
   109 000000A6 29CE                <1>         sub esi, ecx
   110 000000A8 C645FF0A            <1>         mov byte [ebp - 1], ASCII_NEWLINE
   111 000000AC 83C101              <1>         add ecx, 1         ; adjust length
   112                              <1> 
   113                              <1> .loop:
   114                              <1>         ; push character on the stack
   115                              <1>         ; store length in ecx
   116                              <1> 
   117 000000AF BA00000000          <1>         mov edx, 0       ; zero upper bits of EDX:EAX
   118 000000B4 F7F3                <1>         div ebx          ; divide by 10
   119 000000B6 83C230              <1>         add edx, ASCII_0 ; adjust to ascii
   120                              <1> 
   121 000000B9 BE09000000          <1>         mov esi, BUFSIZE - 1
   122 000000BE 29CE                <1>         sub esi, ecx
   123 000000C0 881434              <1>         mov [esp + esi], dl; store in the buffer
   124                              <1> 
   125 000000C3 83C101              <1>         add ecx, 1       ; adjust length
   126 000000C6 83F800              <1>         cmp eax, 0       ; see if we are done
   127 000000C9 75E4                <1>         jnz .loop
   128                              <1> 
   129                              <1> 
   130 000000CB B804000000          <1>         mov eax, 4   ; write syscall
   131 000000D0 BB00000000          <1>         mov ebx, 0   ; stdout fd
   132 000000D5 89CA                <1>         mov edx, ecx ; length of string
   133 000000D7 89E9                <1>         mov ecx, ebp
   134 000000D9 29D1                <1>         sub ecx, edx ; location of output string
   135 000000DB CD80                <1>         int 0x80
   136 000000DD 89EC                <1>         mov esp, ebp
   137 000000DF 5D                  <1>     pop ebp
   138 000000E0 C3                  <1>     ret
