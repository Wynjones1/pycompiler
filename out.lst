     1                                  [BITS 32]
     2                                  section .data
     3                                  section .bss
     4 00000000 <res 00000020>          str0: resb 0x20
     5                                  _stack_start:
     6 00000020 <res 0000FFFF>          	resb 0xffff
     7                                  _stack_end:
     8                                  section .text
     9                                  	global _start
    10                                  _start:
    11 00000000 BC[20000000]            	mov esp, _stack_start
    12 00000005 89E5                    	mov ebp, esp
    13 00000007 E825000000              	call main
    14 0000000C BB00000000              	mov ebx, 0
    15 00000011 B801000000              	mov eax, 1
    16 00000016 CD80                    	int 0x80
    17                                  ;------------------------------------| startfunc f0
    18                                  f0:
    19 00000018 55                      	push ebp
    20 00000019 89E5                    	mov ebp, esp
    21 0000001B 83EC00                  	sub esp, 0
    22                                  ;------------------------------------| arg int f0_param_0
    23                                  ;------------------------------------| arg int f0_param_1
    24                                  ;------------------------------------| end_decls
    25 0000001E 83EC00                  	sub esp, 0
    26                                  ;------------------------------------| param f0_param_0
    27 00000021 8B4508                  	mov eax, [ebp + 8]
    28 00000024 50                      	push eax
    29                                  ;------------------------------------| CALL print
    30 00000025 E830000000              	call print
    31 0000002A 83C404                  	add esp, 4
    32                                  ;------------------------------------| endfunc f0
    33                                  .end:
    34 0000002D 89EC                    	mov esp, ebp
    35 0000002F 5D                      	pop ebp
    36 00000030 C3                      	ret
    37                                  ;------------------------------------| startfunc main
    38                                  main:
    39 00000031 55                      	push ebp
    40 00000032 89E5                    	mov ebp, esp
    41 00000034 83EC04                  	sub esp, 4
    42                                  ;------------------------------------| decl b int
    43                                  ;------------------------------------| end_decls
    44 00000037 83EC04                  	sub esp, 4
    45                                  ;------------------------------------| := b 2
    46 0000003A C745FC02000000          	mov dword [ebp + -4], 2
    47                                  ;------------------------------------| param 10
    48 00000041 6A0A                    	push 10
    49                                  ;------------------------------------| * _t0 b b
    50 00000043 8B45FC                  	mov eax, [ebp + -4]
    51 00000046 50                      	push eax
    52 00000047 8B5DFC                  	mov ebx, [ebp + -4]
    53 0000004A F7E3                    	mul ebx
    54 0000004C 5B                      	pop ebx
    55                                  ;------------------------------------| param _t0
    56 0000004D 50                      	push eax
    57                                  ;------------------------------------| CALL f0
    58 0000004E E8C5FFFFFF              	call f0
    59 00000053 83C408                  	add esp, 8
    60                                  ;------------------------------------| endfunc main
    61                                  .end:
    62 00000056 89EC                    	mov esp, ebp
    63 00000058 5D                      	pop ebp
    64 00000059 C3                      	ret
    65                                  	%include "src/stdlib.asm"
    66                              <1> %define ASCII_A       0x41
    67                              <1> %define ASCII_0       0x30
    68                              <1> %define ASCII_NEWLINE 0xa
    69                              <1> %define BUFSIZE 10
    70                              <1> ; print the integer pointed to by the first argument
    71                              <1> print:
    72 0000005A 55                  <1>     push ebp
    73 0000005B 89E5                <1>         mov ebp, esp
    74 0000005D 8B4508              <1>         mov eax, [ebp + 8]
    75 00000060 BB0A000000          <1>         mov ebx, 10
    76 00000065 B900000000          <1>         mov ecx, 0
    77 0000006A 83EC0A              <1>         sub esp, BUFSIZE; reserve space for the integer
    78                              <1> 
    79 0000006D BE09000000          <1>         mov esi, BUFSIZE - 1
    80 00000072 29CE                <1>         sub esi, ecx
    81 00000074 C645FF0A            <1>         mov byte [ebp - 1], ASCII_NEWLINE
    82 00000078 83C101              <1>         add ecx, 1         ; adjust length
    83                              <1> 
    84                              <1> .loop:
    85                              <1>         ; push character on the stack
    86                              <1>         ; store length in ecx
    87                              <1> 
    88 0000007B BA00000000          <1>         mov edx, 0       ; zero upper bits of EDX:EAX
    89 00000080 F7F3                <1>         div ebx          ; divide by 10
    90 00000082 83C230              <1>         add edx, ASCII_0 ; adjust to ascii
    91                              <1> 
    92 00000085 BE09000000          <1>         mov esi, BUFSIZE - 1
    93 0000008A 29CE                <1>         sub esi, ecx
    94 0000008C 881434              <1>         mov [esp + esi], dl; store in the buffer
    95                              <1> 
    96 0000008F 83C101              <1>         add ecx, 1       ; adjust length
    97 00000092 83F800              <1>         cmp eax, 0       ; see if we are done
    98 00000095 75E4                <1>         jnz .loop
    99                              <1> 
   100                              <1> 
   101 00000097 B804000000          <1>         mov eax, 4   ; write syscall
   102 0000009C BB00000000          <1>         mov ebx, 0   ; stdout fd
   103 000000A1 89CA                <1>         mov edx, ecx ; length of string
   104 000000A3 89E9                <1>         mov ecx, ebp
   105 000000A5 29D1                <1>         sub ecx, edx ; location of output string
   106 000000A7 CD80                <1>         int 0x80
   107 000000A9 89EC                <1>         mov esp, ebp
   108 000000AB 5D                  <1>     pop ebp
   109 000000AC C3                  <1>     ret
