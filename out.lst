     1                                  [BITS 32]
     2                                  section .data
     3                                  section .bss
     4 00000000 <res 00000020>          str0: resb 0x20
     5                                  _stack_start:
     6 00000020 <res 0000FFFF>          	resb 0xffff
     7                                  _stack_end:
     8                                  section .text
     9                                  	global _start
    10                                  _start:
    11 00000000 BC[20000000]            	mov esp, _stack_start
    12 00000005 89E5                    	mov ebp, esp
    13 00000007 E82B000000              	call main
    14 0000000C BB00000000              	mov ebx, 0
    15 00000011 B801000000              	mov eax, 1
    16 00000016 CD80                    	int 0x80
    17                                  ;------------------------------------| startfunc f0
    18                                  f0:
    19 00000018 55                      	push ebp
    20 00000019 89E5                    	mov ebp, esp
    21 0000001B 83C40C                  	add esp, 12
    22                                  ;------------------------------------| arg int f0_param_0
    23                                  ;------------------------------------| arg int f0_param_1
    24                                  ;------------------------------------| JZ L0: f0_scope_0
    25 0000001E 8B45FC                  	mov eax, [ebp + -4]
    26 00000021 83F800                  	cmp eax, 0
    27 00000024 740F                    	jz L0
    28                                  ;------------------------------------| * _t0 10 a
    29 00000026 B80A000000              	mov eax, 10
    30 0000002B 53                      	push ebx
    31 0000002C 8B5DF4                  	mov ebx, [ebp + -12]
    32 0000002F F7E3                    	mul ebx
    33 00000031 5B                      	pop ebx
    34                                  ;------------------------------------| := a _t0
    35 00000032 8945F4                  	mov [ebp + -12], eax
    36                                  ;------------------------------------| L0:
    37                                  L0:
    38                                  ;------------------------------------| endfunc f0
    39                                  .end:
    40 00000035 5D                      	pop ebp
    41 00000036 C3                      	ret
    42                                  ;------------------------------------| startfunc main
    43                                  main:
    44 00000037 55                      	push ebp
    45 00000038 89E5                    	mov ebp, esp
    46 0000003A 83C40C                  	add esp, 12
    47                                  ;------------------------------------| := b 1234
    48 0000003D C745FCD2040000          	mov dword [ebp + -4], 1234
    49                                  ;------------------------------------| := c 123
    50 00000044 C745F87B000000          	mov dword [ebp + -8], 123
    51                                  ;------------------------------------| + _t2 b 123
    52 0000004B 8B45FC                  	mov eax, [ebp + -4]
    53 0000004E 53                      	push ebx
    54 0000004F BB7B000000              	mov ebx, 123
    55 00000054 01D8                    	add eax, ebx
    56 00000056 5B                      	pop ebx
    57                                  ;------------------------------------| param _t2
    58 00000057 50                      	push eax
    59                                  ;------------------------------------| CALL print
    60 00000058 E83F000000              	call print
    61 0000005D 83C404                  	add esp, 4
    62                                  ;------------------------------------| param c
    63 00000060 8B45F8                  	mov eax, [ebp + -8]
    64 00000063 50                      	push eax
    65                                  ;------------------------------------| CALL print
    66 00000064 E833000000              	call print
    67 00000069 83C404                  	add esp, 4
    68                                  ;------------------------------------| param a123
    69 0000006C 8B45F4                  	mov eax, [ebp + -12]
    70 0000006F 50                      	push eax
    71                                  ;------------------------------------| CALL print
    72 00000070 E827000000              	call print
    73 00000075 83C404                  	add esp, 4
    74                                  ;------------------------------------| + _t3 b 1
    75 00000078 8B45FC                  	mov eax, [ebp + -4]
    76 0000007B 53                      	push ebx
    77 0000007C BB01000000              	mov ebx, 1
    78 00000081 01D8                    	add eax, ebx
    79 00000083 5B                      	pop ebx
    80                                  ;------------------------------------| param _t3
    81 00000084 50                      	push eax
    82                                  ;------------------------------------| + _t4 b 2
    83 00000085 8B45FC                  	mov eax, [ebp + -4]
    84 00000088 53                      	push ebx
    85 00000089 BB02000000              	mov ebx, 2
    86 0000008E 01D8                    	add eax, ebx
    87 00000090 5B                      	pop ebx
    88                                  ;------------------------------------| param _t4
    89 00000091 50                      	push eax
    90                                  ;------------------------------------| CALL f0
    91 00000092 E881FFFFFF              	call f0
    92 00000097 83C408                  	add esp, 8
    93                                  ;------------------------------------| endfunc main
    94                                  .end:
    95 0000009A 5D                      	pop ebp
    96 0000009B C3                      	ret
    97                                  	%include "src/stdlib.asm"
    98                              <1> %define ASCII_A       0x41
    99                              <1> %define ASCII_0       0x30
   100                              <1> %define ASCII_NEWLINE 0xa
   101                              <1> %define BUFSIZE 10
   102                              <1> ; print the integer pointed to by the first argument
   103                              <1> print:
   104 0000009C 55                  <1>     push ebp
   105 0000009D 89E5                <1>         mov ebp, esp
   106 0000009F 8B4508              <1>         mov eax, [ebp + 8]
   107 000000A2 BB0A000000          <1>         mov ebx, 10
   108 000000A7 B900000000          <1>         mov ecx, 0
   109 000000AC 83EC0A              <1>         sub esp, BUFSIZE; reserve space for the integer
   110                              <1> 
   111 000000AF BE09000000          <1>         mov esi, BUFSIZE - 1
   112 000000B4 29CE                <1>         sub esi, ecx
   113 000000B6 C645FF0A            <1>         mov byte [ebp - 1], ASCII_NEWLINE
   114 000000BA 83C101              <1>         add ecx, 1         ; adjust length
   115                              <1> 
   116                              <1> .loop:
   117                              <1>         ; push character on the stack
   118                              <1>         ; store length in ecx
   119                              <1> 
   120 000000BD BA00000000          <1>         mov edx, 0       ; zero upper bits of EDX:EAX
   121 000000C2 F7F3                <1>         div ebx          ; divide by 10
   122 000000C4 83C230              <1>         add edx, ASCII_0 ; adjust to ascii
   123                              <1> 
   124 000000C7 BE09000000          <1>         mov esi, BUFSIZE - 1
   125 000000CC 29CE                <1>         sub esi, ecx
   126 000000CE 881434              <1>         mov [esp + esi], dl; store in the buffer
   127                              <1> 
   128 000000D1 83C101              <1>         add ecx, 1       ; adjust length
   129 000000D4 83F800              <1>         cmp eax, 0       ; see if we are done
   130 000000D7 75E4                <1>         jnz .loop
   131                              <1> 
   132                              <1> 
   133 000000D9 B804000000          <1>         mov eax, 4   ; write syscall
   134 000000DE BB00000000          <1>         mov ebx, 0   ; stdout fd
   135 000000E3 89CA                <1>         mov edx, ecx ; length of string
   136 000000E5 89E9                <1>         mov ecx, ebp
   137 000000E7 29D1                <1>         sub ecx, edx ; location of output string
   138 000000E9 CD80                <1>         int 0x80
   139 000000EB 89EC                <1>         mov esp, ebp
   140 000000ED 5D                  <1>     pop ebp
   141 000000EE C3                  <1>     ret
