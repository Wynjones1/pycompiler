     1                                  [BITS 32]
     2                                  section .data
     3                                  section .bss
     4 00000000 <res 00000020>          str0: resb 0x20
     5                                  _stack_start:
     6 00000020 <res 0000FFFF>          	resb 0xffff
     7                                  _stack_end:
     8                                  section .text
     9                                  	global _start
    10                                  _start:
    11 00000000 BC[20000000]            	mov esp, _stack_start
    12 00000005 89E5                    	mov ebp, esp
    13 00000007 E867000000              	call main
    14 0000000C BB00000000              	mov ebx, 0
    15 00000011 B801000000              	mov eax, 1
    16 00000016 CD80                    	int 0x80
    17                                  ;------------------------------------| startfunc fib
    18                                  fib:
    19 00000018 55                      	push ebp
    20 00000019 89E5                    	mov ebp, esp
    21                                  ;------------------------------------| arg int a
    22                                  ;------------------------------------| decl t0 int
    23                                  ;------------------------------------| decl t1 int
    24                                  ;------------------------------------| end_decls
    25 0000001B 83EC08                  	sub esp, 8
    26                                  ;------------------------------------| < _t0 a 2
    27 0000001E 8B4508                  	mov eax, [ebp + 8]
    28 00000021 50                      	push eax
    29 00000022 BB02000000              	mov ebx, 2
    30 00000027 39D8                    	cmp eax, ebx
    31 00000029 5B                      	pop ebx
    32                                  ;------------------------------------| JZ .L0: _t0
    33 0000002A 89C0                    	mov eax, eax
    34 0000002C 83F800                  	cmp eax, 0
    35 0000002F 7402                    	jz .L0
    36                                  ;------------------------------------| return 1
    37 00000031 7A3C                    	jp .end
    38                                  ;------------------------------------| .L0:
    39                                  .L0:
    40                                  ;------------------------------------| - _t1 a 1
    41 00000033 8B4508                  	mov eax, [ebp + 8]
    42 00000036 50                      	push eax
    43 00000037 BB01000000              	mov ebx, 1
    44 0000003C 29D8                    	sub eax, ebx
    45 0000003E 5B                      	pop ebx
    46                                  ;------------------------------------| param _t1
    47 0000003F 50                      	push eax
    48                                  ;------------------------------------| CALL fib
    49 00000040 E8D3FFFFFF              	call fib
    50 00000045 83C404                  	add esp, 4
    51                                  ;------------------------------------| := t0 _t1
    52 00000048 8945FC                  	mov [ebp + -4], eax
    53                                  ;------------------------------------| - _t2 a 2
    54 0000004B 8B4508                  	mov eax, [ebp + 8]
    55 0000004E 50                      	push eax
    56 0000004F BB02000000              	mov ebx, 2
    57 00000054 29D8                    	sub eax, ebx
    58 00000056 5B                      	pop ebx
    59                                  ;------------------------------------| param _t2
    60 00000057 50                      	push eax
    61                                  ;------------------------------------| CALL fib
    62 00000058 E8BBFFFFFF              	call fib
    63 0000005D 83C404                  	add esp, 4
    64                                  ;------------------------------------| := t1 _t2
    65 00000060 8945F8                  	mov [ebp + -8], eax
    66                                  ;------------------------------------| + _t3 t0 t1
    67 00000063 8B45FC                  	mov eax, [ebp + -4]
    68 00000066 50                      	push eax
    69 00000067 8B5DF8                  	mov ebx, [ebp + -8]
    70 0000006A 01D8                    	add eax, ebx
    71 0000006C 5B                      	pop ebx
    72                                  ;------------------------------------| return _t3
    73 0000006D 7A00                    	jp .end
    74                                  ;------------------------------------| endfunc fib
    75                                  .end:
    76 0000006F 89EC                    	mov esp, ebp
    77 00000071 5D                      	pop ebp
    78 00000072 C3                      	ret
    79                                  ;------------------------------------| startfunc main
    80                                  main:
    81 00000073 55                      	push ebp
    82 00000074 89E5                    	mov ebp, esp
    83                                  ;------------------------------------| decl a' int
    84                                  ;------------------------------------| end_decls
    85 00000076 83EC04                  	sub esp, 4
    86                                  ;------------------------------------| param 0
    87 00000079 6A00                    	push 0
    88                                  ;------------------------------------| CALL fib
    89 0000007B E898FFFFFF              	call fib
    90 00000080 83C404                  	add esp, 4
    91                                  ;------------------------------------| param 0
    92 00000083 6A00                    	push 0
    93                                  ;------------------------------------| CALL print
    94 00000085 E807000000              	call print
    95 0000008A 83C404                  	add esp, 4
    96                                  ;------------------------------------| endfunc main
    97                                  .end:
    98 0000008D 89EC                    	mov esp, ebp
    99 0000008F 5D                      	pop ebp
   100 00000090 C3                      	ret
   101                                  	%include "src/stdlib.asm"
   102                              <1> %define ASCII_A       0x41
   103                              <1> %define ASCII_0       0x30
   104                              <1> %define ASCII_NEWLINE 0xa
   105                              <1> %define BUFSIZE 10
   106                              <1> ; print the integer pointed to by the first argument
   107                              <1> print:
   108 00000091 55                  <1>     push ebp
   109 00000092 89E5                <1>         mov ebp, esp
   110 00000094 8B4508              <1>         mov eax, [ebp + 8]
   111 00000097 BB0A000000          <1>         mov ebx, 10
   112 0000009C B900000000          <1>         mov ecx, 0
   113 000000A1 83EC0A              <1>         sub esp, BUFSIZE; reserve space for the integer
   114                              <1> 
   115 000000A4 BE09000000          <1>         mov esi, BUFSIZE - 1
   116 000000A9 29CE                <1>         sub esi, ecx
   117 000000AB C645FF0A            <1>         mov byte [ebp - 1], ASCII_NEWLINE
   118 000000AF 83C101              <1>         add ecx, 1         ; adjust length
   119                              <1> 
   120                              <1> .loop:
   121                              <1>         ; push character on the stack
   122                              <1>         ; store length in ecx
   123                              <1> 
   124 000000B2 BA00000000          <1>         mov edx, 0       ; zero upper bits of EDX:EAX
   125 000000B7 F7F3                <1>         div ebx          ; divide by 10
   126 000000B9 83C230              <1>         add edx, ASCII_0 ; adjust to ascii
   127                              <1> 
   128 000000BC BE09000000          <1>         mov esi, BUFSIZE - 1
   129 000000C1 29CE                <1>         sub esi, ecx
   130 000000C3 881434              <1>         mov [esp + esi], dl; store in the buffer
   131                              <1> 
   132 000000C6 83C101              <1>         add ecx, 1       ; adjust length
   133 000000C9 83F800              <1>         cmp eax, 0       ; see if we are done
   134 000000CC 75E4                <1>         jnz .loop
   135                              <1> 
   136                              <1> 
   137 000000CE B804000000          <1>         mov eax, 4   ; write syscall
   138 000000D3 BB00000000          <1>         mov ebx, 0   ; stdout fd
   139 000000D8 89CA                <1>         mov edx, ecx ; length of string
   140 000000DA 89E9                <1>         mov ecx, ebp
   141 000000DC 29D1                <1>         sub ecx, edx ; location of output string
   142 000000DE CD80                <1>         int 0x80
   143 000000E0 89EC                <1>         mov esp, ebp
   144 000000E2 5D                  <1>     pop ebp
   145 000000E3 C3                  <1>     ret
