     1                                  [BITS 32]
     2                                  section .data
     3                                  section .bss
     4 00000000 <res 00000020>          str0: resb 0x20
     5                                  _stack_start:
     6 00000020 <res 0000FFFF>          	resb 0xffff
     7                                  _stack_end:
     8                                  section .text
     9                                  	global _start
    10                                  _start:
    11 00000000 BC[20000000]            	mov esp, _stack_start
    12 00000005 89E5                    	mov ebp, esp
    13 00000007 E82E000000              	call main
    14 0000000C BB00000000              	mov ebx, 0
    15 00000011 B801000000              	mov eax, 1
    16 00000016 CD80                    	int 0x80
    17                                  ;------------------------------------| startfunc f0
    18                                  f0:
    19 00000018 55                      	push ebp
    20 00000019 89E5                    	mov ebp, esp
    21                                  ;------------------------------------| arg int f0_param_0
    22                                  ;------------------------------------| arg int f0_param_1
    23                                  ;------------------------------------| end_decls
    24 0000001B 83EC00                  	sub esp, 0
    25                                  ;------------------------------------| param f0_param_0
    26 0000001E 8B4504                  	mov eax, [ebp + 4]
    27 00000021 50                      	push eax
    28                                  ;------------------------------------| CALL print
    29 00000022 E854000000              	call print
    30 00000027 83C404                  	add esp, 4
    31                                  ;------------------------------------| param f0_param_1
    32 0000002A 8B4508                  	mov eax, [ebp + 8]
    33 0000002D 50                      	push eax
    34                                  ;------------------------------------| CALL print
    35 0000002E E848000000              	call print
    36 00000033 83C404                  	add esp, 4
    37                                  ;------------------------------------| endfunc f0
    38                                  .end:
    39 00000036 89EC                    	mov esp, ebp
    40 00000038 5D                      	pop ebp
    41 00000039 C3                      	ret
    42                                  ;------------------------------------| startfunc main
    43                                  main:
    44 0000003A 55                      	push ebp
    45 0000003B 89E5                    	mov ebp, esp
    46                                  ;------------------------------------| decl b' int
    47                                  ;------------------------------------| decl b'' int
    48                                  ;------------------------------------| decl b int
    49                                  ;------------------------------------| end_decls
    50 0000003D 83EC0C                  	sub esp, 12
    51                                  ;------------------------------------| := b 2
    52 00000040 C745F402000000          	mov dword [ebp + -12], 2
    53                                  ;------------------------------------| JZ L0: 10
    54 00000047 B80A000000              	mov eax, 10
    55 0000004C 83F800                  	cmp eax, 0
    56 0000004F 7426                    	jz L0
    57                                  ;------------------------------------| := b' 123
    58 00000051 C745FC7B000000          	mov dword [ebp + -4], 123
    59                                  ;------------------------------------| JZ L1: 10
    60 00000058 B80A000000              	mov eax, 10
    61 0000005D 83F800                  	cmp eax, 0
    62 00000060 7400                    	jz L1
    63                                  ;------------------------------------| L1:
    64                                  L1:
    65                                  ;------------------------------------| param 10
    66 00000062 6A0A                    	push 10
    67                                  ;------------------------------------| * _t0 b' b'
    68 00000064 8B45FC                  	mov eax, [ebp + -4]
    69 00000067 50                      	push eax
    70 00000068 8B5DFC                  	mov ebx, [ebp + -4]
    71 0000006B F7E3                    	mul ebx
    72 0000006D 5B                      	pop ebx
    73                                  ;------------------------------------| param _t0
    74 0000006E 50                      	push eax
    75                                  ;------------------------------------| CALL f0
    76 0000006F E8A4FFFFFF              	call f0
    77 00000074 83C408                  	add esp, 8
    78                                  ;------------------------------------| L0:
    79                                  L0:
    80                                  ;------------------------------------| endfunc main
    81                                  .end:
    82 00000077 89EC                    	mov esp, ebp
    83 00000079 5D                      	pop ebp
    84 0000007A C3                      	ret
    85                                  	%include "src/stdlib.asm"
    86                              <1> %define ASCII_A       0x41
    87                              <1> %define ASCII_0       0x30
    88                              <1> %define ASCII_NEWLINE 0xa
    89                              <1> %define BUFSIZE 10
    90                              <1> ; print the integer pointed to by the first argument
    91                              <1> print:
    92 0000007B 55                  <1>     push ebp
    93 0000007C 89E5                <1>         mov ebp, esp
    94 0000007E 8B4508              <1>         mov eax, [ebp + 8]
    95 00000081 BB0A000000          <1>         mov ebx, 10
    96 00000086 B900000000          <1>         mov ecx, 0
    97 0000008B 83EC0A              <1>         sub esp, BUFSIZE; reserve space for the integer
    98                              <1> 
    99 0000008E BE09000000          <1>         mov esi, BUFSIZE - 1
   100 00000093 29CE                <1>         sub esi, ecx
   101 00000095 C645FF0A            <1>         mov byte [ebp - 1], ASCII_NEWLINE
   102 00000099 83C101              <1>         add ecx, 1         ; adjust length
   103                              <1> 
   104                              <1> .loop:
   105                              <1>         ; push character on the stack
   106                              <1>         ; store length in ecx
   107                              <1> 
   108 0000009C BA00000000          <1>         mov edx, 0       ; zero upper bits of EDX:EAX
   109 000000A1 F7F3                <1>         div ebx          ; divide by 10
   110 000000A3 83C230              <1>         add edx, ASCII_0 ; adjust to ascii
   111                              <1> 
   112 000000A6 BE09000000          <1>         mov esi, BUFSIZE - 1
   113 000000AB 29CE                <1>         sub esi, ecx
   114 000000AD 881434              <1>         mov [esp + esi], dl; store in the buffer
   115                              <1> 
   116 000000B0 83C101              <1>         add ecx, 1       ; adjust length
   117 000000B3 83F800              <1>         cmp eax, 0       ; see if we are done
   118 000000B6 75E4                <1>         jnz .loop
   119                              <1> 
   120                              <1> 
   121 000000B8 B804000000          <1>         mov eax, 4   ; write syscall
   122 000000BD BB00000000          <1>         mov ebx, 0   ; stdout fd
   123 000000C2 89CA                <1>         mov edx, ecx ; length of string
   124 000000C4 89E9                <1>         mov ecx, ebp
   125 000000C6 29D1                <1>         sub ecx, edx ; location of output string
   126 000000C8 CD80                <1>         int 0x80
   127 000000CA 89EC                <1>         mov esp, ebp
   128 000000CC 5D                  <1>     pop ebp
   129 000000CD C3                  <1>     ret
