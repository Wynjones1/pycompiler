     1                                  [BITS 32]
     2                                  section .data
     3                                  section .bss
     4 00000000 <res 00000020>          str0: resb 0x20
     5                                  _stack_start:
     6 00000020 <res 0000FFFF>          	resb 0xffff
     7                                  _stack_end:
     8                                  section .text
     9                                  	global _start
    10                                  _start:
    11 00000000 BC[20000000]            	mov esp, _stack_start
    12 00000005 89E5                    	mov ebp, esp
    13 00000007 E822000000              	call main
    14 0000000C BB00000000              	mov ebx, 0
    15 00000011 B801000000              	mov eax, 1
    16 00000016 CD80                    	int 0x80
    17                                  ;------------------------------------| startfunc fib
    18                                  fib:
    19 00000018 55                      	push ebp
    20 00000019 89E5                    	mov ebp, esp
    21                                  ;------------------------------------| arg int a
    22                                  ;------------------------------------| end_decls
    23 0000001B 83EC00                  	sub esp, 0
    24                                  ;------------------------------------| param a
    25 0000001E 8B4508                  	mov eax, [ebp + 8]
    26 00000021 50                      	push eax
    27                                  ;------------------------------------| CALL print
    28 00000022 E825000000              	call print
    29 00000027 83C404                  	add esp, 4
    30                                  ;------------------------------------| endfunc fib
    31                                  .end:
    32 0000002A 89EC                    	mov esp, ebp
    33 0000002C 5D                      	pop ebp
    34 0000002D C3                      	ret
    35                                  ;------------------------------------| startfunc main
    36                                  main:
    37 0000002E 55                      	push ebp
    38 0000002F 89E5                    	mov ebp, esp
    39                                  ;------------------------------------| end_decls
    40 00000031 83EC00                  	sub esp, 0
    41                                  ;------------------------------------| param 0
    42 00000034 6A00                    	push 0
    43                                  ;------------------------------------| CALL fib
    44 00000036 E8DDFFFFFF              	call fib
    45 0000003B 83C404                  	add esp, 4
    46                                  ;------------------------------------| param 0
    47 0000003E 6A00                    	push 0
    48                                  ;------------------------------------| CALL print
    49 00000040 E807000000              	call print
    50 00000045 83C404                  	add esp, 4
    51                                  ;------------------------------------| endfunc main
    52                                  .end:
    53 00000048 89EC                    	mov esp, ebp
    54 0000004A 5D                      	pop ebp
    55 0000004B C3                      	ret
    56                                  	%include "src/stdlib.asm"
    57                              <1> %define ASCII_A       0x41
    58                              <1> %define ASCII_0       0x30
    59                              <1> %define ASCII_NEWLINE 0xa
    60                              <1> %define BUFSIZE 10
    61                              <1> ; print the integer pointed to by the first argument
    62                              <1> print:
    63 0000004C 55                  <1>     push ebp
    64 0000004D 89E5                <1>         mov ebp, esp
    65 0000004F 8B4508              <1>         mov eax, [ebp + 8]
    66 00000052 BB0A000000          <1>         mov ebx, 10
    67 00000057 B900000000          <1>         mov ecx, 0
    68 0000005C 83EC0A              <1>         sub esp, BUFSIZE; reserve space for the integer
    69                              <1> 
    70 0000005F BE09000000          <1>         mov esi, BUFSIZE - 1
    71 00000064 29CE                <1>         sub esi, ecx
    72 00000066 C645FF0A            <1>         mov byte [ebp - 1], ASCII_NEWLINE
    73 0000006A 83C101              <1>         add ecx, 1         ; adjust length
    74                              <1> 
    75                              <1> .loop:
    76                              <1>         ; push character on the stack
    77                              <1>         ; store length in ecx
    78                              <1> 
    79 0000006D BA00000000          <1>         mov edx, 0       ; zero upper bits of EDX:EAX
    80 00000072 F7F3                <1>         div ebx          ; divide by 10
    81 00000074 83C230              <1>         add edx, ASCII_0 ; adjust to ascii
    82                              <1> 
    83 00000077 BE09000000          <1>         mov esi, BUFSIZE - 1
    84 0000007C 29CE                <1>         sub esi, ecx
    85 0000007E 881434              <1>         mov [esp + esi], dl; store in the buffer
    86                              <1> 
    87 00000081 83C101              <1>         add ecx, 1       ; adjust length
    88 00000084 83F800              <1>         cmp eax, 0       ; see if we are done
    89 00000087 75E4                <1>         jnz .loop
    90                              <1> 
    91                              <1> 
    92 00000089 B804000000          <1>         mov eax, 4   ; write syscall
    93 0000008E BB00000000          <1>         mov ebx, 0   ; stdout fd
    94 00000093 89CA                <1>         mov edx, ecx ; length of string
    95 00000095 89E9                <1>         mov ecx, ebp
    96 00000097 29D1                <1>         sub ecx, edx ; location of output string
    97 00000099 CD80                <1>         int 0x80
    98 0000009B 89EC                <1>         mov esp, ebp
    99 0000009D 5D                  <1>     pop ebp
   100 0000009E C3                  <1>     ret
