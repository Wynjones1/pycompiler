     1                                  [BITS 32]
     2                                  section .data
     3                                  section .bss
     4 00000000 <res 00000020>          str0: resb 0x20
     5                                  _stack_start:
     6 00000020 <res 0000FFFF>          	resb 0xffff
     7                                  _stack_end:
     8                                  section .text
     9                                  	global _start
    10                                  _start:
    11 00000000 BC[20000000]            	mov esp, _stack_start
    12 00000005 89E5                    	mov ebp, esp
    13 00000007 E811000000              	call main
    14 0000000C BB00000000              	mov ebx, 0
    15 00000011 B801000000              	mov eax, 1
    16 00000016 CD80                    	int 0x80
    17                                  ;------------------------------------| startfunc f0
    18                                  f0:
    19 00000018 55                      	push ebp
    20 00000019 89E5                    	mov ebp, esp
    21                                  ;------------------------------------| arg int a
    22                                  ;------------------------------------| arg int b
    23                                  ;------------------------------------| endfunc f0
    24                                  .end:
    25 0000001B 5D                      	pop ebp
    26 0000001C C3                      	ret
    27                                  ;------------------------------------| startfunc main
    28                                  main:
    29 0000001D 55                      	push ebp
    30 0000001E 89E5                    	mov ebp, esp
    31                                  ;------------------------------------| := b 1234
    32 00000020 C74424FCD2040000        	mov dword [esp + -4], 1234
    33                                  ;------------------------------------| param b
    34 00000028 8B4424FC                	mov eax, [esp + -4]
    35 0000002C 50                      	push eax
    36                                  ;------------------------------------| CALL print
    37 0000002D E829000000              	call print
    38 00000032 83C404                  	add esp, 4
    39                                  ;------------------------------------| + _t0 b 1
    40 00000035 8B4424FC                	mov eax, [esp + -4]
    41 00000039 53                      	push ebx
    42 0000003A BB01000000              	mov ebx, 1
    43 0000003F 01D8                    	add eax, ebx
    44 00000041 5B                      	pop ebx
    45                                  ;------------------------------------| param _t0
    46 00000042 50                      	push eax
    47                                  ;------------------------------------| + _t1 b 2
    48 00000043 8B4424FC                	mov eax, [esp + -4]
    49 00000047 53                      	push ebx
    50 00000048 BB02000000              	mov ebx, 2
    51 0000004D 01D8                    	add eax, ebx
    52 0000004F 5B                      	pop ebx
    53                                  ;------------------------------------| param _t1
    54 00000050 50                      	push eax
    55                                  ;------------------------------------| CALL f0
    56 00000051 E8C2FFFFFF              	call f0
    57 00000056 83C408                  	add esp, 8
    58                                  ;------------------------------------| endfunc main
    59                                  .end:
    60 00000059 5D                      	pop ebp
    61 0000005A C3                      	ret
    62                                  	%include "src/stdlib.asm"
    63                              <1> %define ASCII_A       0x41
    64                              <1> %define ASCII_0       0x30
    65                              <1> %define ASCII_NEWLINE 0xa
    66                              <1> %define BUFSIZE 10
    67                              <1> ; print the integer pointed to by the first argument
    68                              <1> print:
    69 0000005B 55                  <1>     push ebp
    70 0000005C 89E5                <1>         mov ebp, esp
    71 0000005E 8B4508              <1>         mov eax, [ebp + 8]
    72 00000061 BB0A000000          <1>         mov ebx, 10
    73 00000066 B900000000          <1>         mov ecx, 0
    74 0000006B 83EC0A              <1>         sub esp, BUFSIZE; reserve space for the integer
    75                              <1> 
    76 0000006E BE09000000          <1>         mov esi, BUFSIZE - 1
    77 00000073 29CE                <1>         sub esi, ecx
    78 00000075 C645FF0A            <1>         mov byte [ebp - 1], ASCII_NEWLINE
    79 00000079 83C101              <1>         add ecx, 1         ; adjust length
    80                              <1> 
    81                              <1> .loop:
    82                              <1>         ; push character on the stack
    83                              <1>         ; store length in ecx
    84                              <1> 
    85 0000007C BA00000000          <1>         mov edx, 0       ; zero upper bits of EDX:EAX
    86 00000081 F7F3                <1>         div ebx          ; divide by 10
    87 00000083 83C230              <1>         add edx, ASCII_0 ; adjust to ascii
    88                              <1> 
    89 00000086 BE09000000          <1>         mov esi, BUFSIZE - 1
    90 0000008B 29CE                <1>         sub esi, ecx
    91 0000008D 881434              <1>         mov [esp + esi], dl; store in the buffer
    92                              <1> 
    93 00000090 83C101              <1>         add ecx, 1       ; adjust length
    94 00000093 83F800              <1>         cmp eax, 0       ; see if we are done
    95 00000096 75E4                <1>         jnz .loop
    96                              <1> 
    97                              <1> 
    98 00000098 B804000000          <1>         mov eax, 4   ; write syscall
    99 0000009D BB00000000          <1>         mov ebx, 0   ; stdout fd
   100 000000A2 89CA                <1>         mov edx, ecx ; length of string
   101 000000A4 89E9                <1>         mov ecx, ebp
   102 000000A6 29D1                <1>         sub ecx, edx ; location of output string
   103 000000A8 CD80                <1>         int 0x80
   104 000000AA 89EC                <1>         mov esp, ebp
   105 000000AC 5D                  <1>     pop ebp
   106 000000AD C3                  <1>     ret
